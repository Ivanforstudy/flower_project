import logging
import os
import sys
import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import django

# Django setup
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_project.settings')
django.setup()

from main.models import Bouquet, Order
from django.contrib.auth import get_user_model

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FSM
class OrderState(StatesGroup):
    waiting_for_bouquet_name = State()
    waiting_for_address = State()
    waiting_for_comment = State()

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# Start command
@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(OrderState.waiting_for_bouquet_name)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±—É–∫–µ—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –±—É–∫–µ—Ç–∞
@router.message(OrderState.waiting_for_bouquet_name)
async def bouquet_name_handler(message: types.Message, state: FSMContext):
    bouquet_name = message.text.strip()
    try:
        flower = Bouquet.objects.get(name__iexact=bouquet_name)
        await state.update_data(flower_id=flower.id)

        if flower.image:
            image_path = flower.image.path
            photo = FSInputFile(image_path)
            await message.answer_photo(photo, caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")
        else:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")

        await state.set_state(OrderState.waiting_for_address)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    except Bouquet.DoesNotExist:
        await message.answer("–ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ê–¥—Ä–µ—Å
@router.message(OrderState.waiting_for_address)
async def address_handler(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    await state.set_state(OrderState.waiting_for_comment)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
@router.message(OrderState.waiting_for_comment)
async def comment_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    flower_id = data.get("flower_id")
    address = data.get("address")
    comment = message.text.strip()

    flower = Bouquet.objects.get(id=flower_id)
    user = get_user_model().objects.first()  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    Order.objects.create(
        user=user,
        bouquet=flower,
        delivery_address=address,
        comment='' if comment == '-' else comment
    )

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

def send_order_notification(bouquet, order):
    import requests
    from .credentials import BOT_TOKEN, CHAT_ID

    text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üíê –ë—É–∫–µ—Ç: {bouquet.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {order.total_price} ‚ÇΩ\n"
        f"üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–Ω–µ—Ç'}"
    )

    image_path = bouquet.image.path if bouquet.image else None
    telegram_api_url = f'https://api.telegram.org/bot{BOT_TOKEN}'

    if image_path:
        with open(image_path, 'rb') as photo_file:
            requests.post(
                f'{telegram_api_url}/sendPhoto',
                data={
                    'chat_id': CHAT_ID,
                    'caption': text
                },
                files={'photo': photo_file}
            )
    else:
        requests.post(
            f'{telegram_api_url}/sendMessage',
            data={'chat_id': CHAT_ID, 'text': text}
        )

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
