import os
import sys
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import django

# Django setup
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flower_project.settings")
django.setup()

from main.models import Bouquet, Order
from django.contrib.auth import get_user_model
from telegram_bot.credentials import BOT_TOKEN, CHAT_ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OrderState(StatesGroup):
    waiting_for_bouquet_name = State()
    waiting_for_address = State()
    waiting_for_datetime = State()
    waiting_for_comment = State()

router = Router()

# /start
@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(OrderState.waiting_for_bouquet_name)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±—É–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")

# –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞
@router.message(OrderState.waiting_for_bouquet_name)
async def bouquet_name_handler(message: types.Message, state: FSMContext):
    name = message.text.strip()
    try:
        flower = Bouquet.objects.get(name__iexact=name)
        await state.update_data(flower_id=flower.id)

        if flower.image and os.path.exists(flower.image.path):
            photo = FSInputFile(flower.image.path)
            await message.answer_photo(photo, caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")
        else:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")

        await state.set_state(OrderState.waiting_for_address)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É–∫–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç.")

# –ê–¥—Ä–µ—Å
@router.message(OrderState.waiting_for_address)
async def address_handler(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    await state.set_state(OrderState.waiting_for_datetime)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-07-11 15:00):")

# –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
@router.message(OrderState.waiting_for_datetime)
async def datetime_handler(message: types.Message, state: FSMContext):
    from datetime import datetime
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(delivery_datetime=dt)
        await state.set_state(OrderState.waiting_for_comment)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-07-11 15:00")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
@router.message(OrderState.waiting_for_comment)
async def comment_handler(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        flower = Bouquet.objects.get(id=data["flower_id"])
        user = get_user_model().objects.first()
        comment = message.text.strip()
        order = Order.objects.create(
            user=user,
            delivery_address=data["address"],
            delivery_datetime=data["delivery_datetime"],
            comment='' if comment == '-' else comment,
            total_price=flower.price
        )
        order.bouquets.add(flower)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω—É
        caption = (
            f"üå∏ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"–ë—É–∫–µ—Ç: {flower.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {flower.price} ‚ÇΩ\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery_datetime']:%d.%m.%Y %H:%M}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment != '-' else '–ù–µ—Ç'}"
        )

        try:
            if flower.image and os.path.exists(flower.image.path):
                photo = FSInputFile(flower.image.path)
                await message.answer_photo(photo, caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")
            else:
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            await message.answer(f"–ë—É–∫–µ—Ç: {flower.name}\n–¶–µ–Ω–∞: {flower.price}‚ÇΩ (—Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
